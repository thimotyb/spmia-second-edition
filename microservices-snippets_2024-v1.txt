Diario: https://docs.google.com/document/d/13bY9hzkLkcluR_zm17It1-6VbeV-BS6VrMWxt3KetSM/edit?usp=sharing
Folder con materiale: https://drive.google.com/drive/folders/1tqC1PFkxO-IBEPmwxK-dnfyNwKQrWmdO?usp=sharing

INSTALL DOCKER ON LOCAL UBUNTU
sudo passwd azureuser
Cegeka2024!
sudo apt update
sudo apt install docker.io

INTRO TO DOCKER

docker --version
sudo docker container ls -as
sudo docker image ls
sudo docker run hello-world
mkdir example
cd example

sudo apk update
sudo apk get nano

nano index.js

var os = require("os");
var hostname = os.hostname();
console.log("hello from " + hostname);

nano Dockerfile

FROM alpine
RUN apk update && apk add nodejs
COPY . /app
WORKDIR /app
CMD ["node","index.js"]

sudo docker image build -t hello:v0.1 .  
sudo docker image ls
sudo docker container run hello:v0.1

=======================================================

sudo docker container run ubuntu
sudo docker image ls
sudo docker container ls -a
sudo docker container start 3ee3
sudo docker container ls -a
sudo docker container run -ti ubuntu /bin/bash
cat /etc/issue
echo "CIAO" >> ciao.txt
cat ciao.txt
exit
sudo docker container ls -as
sudo docker container start 8ed4
sudo docker container exec -ti 8ed4 /bin/bash
ls
cat ciao.txt
sudo docker container ls -as
sudo docker container run -ti ubuntu /bin/bash

echo "TOPOLINO" >> pippo.txt
exit
sudo docker container start 2ddf
sudo docker container exec -ti 2ddf /bin/bash
ls
exit

sudo apt install net-tools
netstat -tan

sudo docker run --name mionginx -d -p 8080:80 nginx
curl localhost:8080
netstat -tan
sudo docker container exec -ti 2f52 /bin/sh
find / -name index.html
vi /usr/share/nginx/html/index.html
echo "CIAOOOO" >> index.html

=======================================================

cd ..

git clone https://github.com/ibnesayeed/linkextractor.git
git clone https://github.com/ibnesayeed/linkextractor.git
git checkout demo
git checkout step0
git checkout step1
sudo docker image build -t linkextractor:step1 .
sudo docker container run --rm linkextractor:step1 http://www.ilmeteo.it
git checkout step2
git checkout step3
sudo docker image build -t linkextractor:step3 .
sudo docker container run -d -p 5000:5000 --name=linkextractor linkextractor:step3
sudo docker container ls
curl localhost:5000/api/http://www.ilmeteo.it
sudo docker container logs linkextractor
sudo docker container stop linkextractor
git checkout step4
sudo apt install docker-compose
tmux + (CTRL-B e SHIFT-2) - (CTRL-B e UP/DOWN)
sudo docker-compose up
netstat -tan
sudo docker-compose ps
sudo docker-compose down
git checkout step5
sudo docker-compose up
sudo docker-compose exec redis redis-cli monitor

======================================================

INSTALL DOCKER AND MINIKUBE ON LOCAL UBUNTU

sudo apt update
sudo apt install docker.io
sudo docker --version
sudo docker run hello-world

https://minikube.sigs.k8s.io/docs/start/

curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
sudo install minikube-linux-amd64 /usr/local/bin/minikube

https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/

curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

Install Calico:
https://projectcalico.docs.tigera.io/getting-started/kubernetes/minikube

# Add current user to docker group
(sudo minikube delete) # delete previous cluster if necessary
sudo usermod -aG docker $USER && newgrp docker
minikube start --network-plugin=cni --cni=calico

kubectl get nodes -o wide
# Set autocomplete and alias
source <(kubectl completion bash) # set up autocomplete in bash into the current shell, bash-completion package should be installed first.
echo "source <(kubectl completion bash)" >> ~/.bashrc # add autocomplete permanently to your bash shell.
alias k=kubectl
complete -o default -F __start_kubectl k

=======================================================

===========================

INTRO TO KUBERNETES

kubectl get nodes -o wide
kubectl get ns
kubectl get pods
kubectl get pods -n kube-system
kubectl get pods -n kube-system -o wide
git clone https://github.com/thimotyb/k8s-intro-tutorials

kubectl run nginx --image=nginx
kubectl get pods -o wide
# From minikube host
kubectl port-forward pod/nginx 8080:80 &  ## ps -fax | grep port-forward to kill

OPPURE MINKUBE SSH:
minikube ssh
curl <podip>

############################
### SPRING CHAPTER 1
#############################

# DOwnload and install spring tools
https://spring.io/tools
cd /home/azureuser/Downloads
tar xfz spring-tool-suite-4-4.22.1.RELEASE-e4.31.0-linux.gtk.x86_64.tar.gz

# Using gitpod
sudo apt update
sudo apt install zip
curl -s "https://get.sdkman.io" | bash
source "/root/.sdkman/bin/sdkman-init.sh"
# source "/home/azureuser/.sdkman/bin/sdkman-init.sh"
sdk list java
sdk install java 8.0.392-tem
sdk install java 21.0.5-tem    # Remember to install this if mvn error: Fatal error compiling: error: release version 21 not supported
sudo apt install maven
mvn -v
sudo apt install jq

# Spring boot quickstart
git clone https://github.com/thimotyb/spmia-second-edition.git
git checkout java21
cd spmia-second-edition
git checkout java21
cd chapter1/simple-application
mvn clean package
java -jar target/simple-application-0.0.1-SNAPSHOT.jar
https://8080-thimotyb-spmiasecondedi-xh8qe15gvhb.ws-eu117.gitpod.io/hello/thimoty?lastName=barbieri


# https://openjdk.org/projects/jdk/
# https://openjdk.org/projects/jdk/21/

############################################################
## SPRING CHAPTER 3
# https://github.com/resilience4j/resilience4j
# https://github.com/resilience4j/resilience4j-spring-boot3-demo

cd /workspace/spmia-second-edition/chapter3/licensing-service


###################################################
# LOMBOK 
# Install STS https://spring.io/tools
# Download lombok .jar https://projectlombok.org/download (1.18.30)
# Copy lombok .jar in STS folder
# add to the end of .ini file: -javaagent:lombok.jar
# Close (not restart) Ide and OPEN
# Add Lombok to dependencies
<dependencies>
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <version>1.18.30</version>
        <scope>provided</scope>
    </dependency>
</dependencies>

# Add compiler plugin with lombok to maven
<plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.8.1</version>
            <configuration>
                <source>21</source>
                <target>21</target>
                <annotationProcessorPaths>
                    <path>
                        <groupId>org.projectlombok</groupId>
                        <artifactId>lombok</artifactId>
                        <version>1.18.20</version>
                    </path>
                </annotationProcessorPaths>
            </configuration>
        </plugin>

###############################################

mvn -v
mvn clean package
mvn spring-boot:run

curl localhost:8080/v1/organization/OptimaGrowth/license/12345 | jq

############################################
CHAPTER 4 - DOCKER INTEGRATION
#############################################

git clone https://github.com/thimotyb/spmia-second-edition.git
git checkout java21
cd spmia-second-edition/chapter4/licensing-service

mvn clean package dockerfile:build

docker image ls
docker container run -d -p 8080:8080 --name licensing-service ostock/licensing-service:0.0.1-SNAPSHOT
docker container ls
curl localhost:8080/v1/organization/OptimaGrowth/license/12345 | jq
docker container run -d -p 8081:8080 --name licensing-service2 ostock/licensing-service:0.0.1-SNAPSHOT
curl localhost:8081/v1/organization/OptimaGrowth/license/67890 | jq
docker ps
docker logs licensing-service

# Using springboot docker integration
mvn spring-boot:build-image

#sudo apt-get update
#sudo apt-get install maven
#sudo mvn -v
#sudo mvn spring-boot:build-image

# Using docker compose
docker container stop licensing-service
docker container stop licensing-service2
docker-compose up
curl localhost:8080/v1/organization/OptimaGrowth/license/12345 | jq

##########################
# CHAPTER 5 - CONFIG SERVER
##########################

git clone https://github.com/thimotyb/spmia-second-edition.git
git checkout java21
cd spmia-second-edition/chapter5
mvn package -DargLine="-Dspring.profiles.active=native" dockerfile:build # Sets profile to native to run tests without needing git server, if want git use active=git
# mvn dockerfile:build
docker-compose -f docker/docker-compose.yml up

# To build only configserver using git profile: mvn package -DargLine="-Dspring.profiles.active=git"
# install vcs extension PostgreSQL v1.4.3 ckolkman PostgreSQL Management Tool, configure to 127.0.0.1 postgres postgres 5432

curl http://localhost:8080/actuator | jq
curl http://localhost:8080/actuator/env | jq

curl http://localhost:8080/v1/organization/d898a142-de44-466c-8c88-9ceb2c2429d3/license/f2a9c9d4-d2c0-44fa-97fe-724d77173c62 | jq

sudo snap install postman
postman&
POST http://localhost:8071/encrypt

##########################
# CHAPTER 6 - SERVICE DISCOVERY
##########################
git clone https://github.com/thimotyb/spmia-second-edition.git
git checkout java21
cd spmia-second-edition/chapter6/Final
mvn package -DargLine="-Dspring.profiles.active=native" dockerfile:build
docker-compose -f docker/docker-compose.yml up

# Test single services
curl http://localhost:8080/v1/organization/d898a142-de44-466c-8c88-9ceb2c2429d3/license/f2a9c9d4-d2c0-44fa-97fe-724d77173c62 | jq   # From licensing service
curl http://localhost:8081/v1/organization/d898a142-de44-466c-8c88-9ceb2c2429d3 | jq # From organization service 1
curl http://localhost:8082/v1/organization/d898a142-de44-466c-8c88-9ceb2c2429d3 | jq # From organization service 2

# Query Eureka API
curl -X GET http://localhost:8070/eureka/apps -H "Accept: application/json" | jq
curl -X GET http://localhost:8070/eureka/apps/LICENSING-SERVICE -H "Accept: application/json" | jq



##########################
# CHAPTER 7 - RESILIENCE4J
##########################
git clone https://github.com/thimotyb/spmia-second-edition.git
git checkout java21
cd spmia-second-edition/chapter7
mvn package -DargLine="-Dspring.profiles.active=native" dockerfile:build
docker-compose -f docker/docker-compose.yml up

# Issue several times to get random unavailability
curl http://localhost:8080/v1/organization/d898a142-de44-466c-8c88-9ceb2c2429d3/license/  

# Call with correlation to check the Spring Filter Servlet to propagate correlation ID
curl -X GET http://localhost:8080/v1/organization/d898a142-de44-466c-8c88-9ceb2c2429d3/license/ -H "tmx-correlation-id: MYSAMPLECORRELATIONID"

##########################
# CHAPTER 8 - SERVICE GATEWAY
##########################
git clone https://github.com/thimotyb/spmia-second-edition.git
git checkout java21
cd spmia-second-edition/chapter8
mvn package -DargLine="-Dspring.profiles.active=native" dockerfile:build
docker-compose -f docker/docker-compose.yml up

curl http://localhost:8072/actuator/gateway/routes | jq
docker ps

# Routing to Licensing Service
curl http://localhost:8080/v1/organization/d898a142-de44-466c-8c88-9ceb2c2429d3/license/f2a9c9d4-d2c0-44fa-97fe-724d77173c62 | jq
curl http://localhost:8072/licensing-service/v1/organization/d898a142-de44-466c-8c88-9ceb2c2429d3/license/f2a9c9d4-d2c0-44fa-97fe-724d77173c62 | jq

# Routing to Organization Service
curl http://localhost:8081/v1/organization/d898a142-de44-466c-8c88-9ceb2c2429d3  | jq
curl http://localhost:8072/organization-service/v1/organization/d898a142-de44-466c-8c88-9ceb2c2429d3 | jq

# Using manual mapping in gateway config:
curl http://localhost:8072/organization/v1/organization/d898a142-de44-466c-8c88-9ceb2c2429d3 | jq
curl http://localhost:8072/license/v1/organization/d898a142-de44-466c-8c88-9ceb2c2429d3/license/f2a9c9d4-d2c0-44fa-97fe-724d77173c62 | jq

curl -v http://localhost:8072/organization-service/v1/organization/d898a142-de44-466c-8c88-9ceb2c2429d3     # Correlation ID added in response by filter
curl -v http://localhost:8072/organization-service/v1/organization/d898a142-de44-466c-8c88-9ceb2c2429d3 -H "tmx-correlation-id: 4c0b1368-9e22-41d8-abd9-f1c4b35dtimo" # Corr ID fetched from request and bounced on response


Chapter7
# Request TOken for User # Basic 64encoding of eagleeye:thisissecret
wget --no-check-certificate \
  --method POST \
  --timeout=0 \
  --header 'Content-Type: application/x-www-form-urlencoded' \
  --header 'Authorization: Basic ZWFnbGVleWU6dGhpc2lzc2VjcmV0' \
  --body-data 'grant_type=password&scope=webclient&username=john.carnell&password=password1' \
   'http://localhost:8901/auth/oauth/token'



cat token
cat token | jq -r .access_token

#PUT ACCESS TOKEN IN VARIABLE AFTER CAT
BEARER_TOKEN=$(cat token | jq -r .access_token)
echo $BEARER_TOKEN

# get Token information
curl http://localhost:8901/auth/user -H "Authorization: Bearer $BEARER_TOKEN" | jq

# Unauthorized call
curl -v http://localhost:8085/v1/organizations/442adb6e-fa58-47f3-9ca2-ed1fecdfe86c | jq
# Autorized call
curl -v http://localhost:8085/v1/organizations/442adb6e-fa58-47f3-9ca2-ed1fecdfe86c -H "Authorization: Bearer $BEARER_TOKEN" | jq
# Unauthorized call via zuul
curl -v http://localhost:5555/api/organization/v1/organizations/442adb6e-fa58-47f3-9ca2-ed1fecdfe86c | jq
# Autorized call via zuul
curl -v http://localhost:5555/api/organization/v1/organizations/442adb6e-fa58-47f3-9ca2-ed1fecdfe86c -H "Authorization: Bearer $BEARER_TOKEN" | jq
# Access denied (403) as this user has a token with not correct authorization (it does not have ADMIN as required in ResourceServerConfiguration of licensing.service
curl -v http://localhost:5555/api/licensing/v1/organizations/e254f8c-c442-4ebe-a82a-e2fc1d1ff78a/licenses/f3831f8c-c338-4ebe-a82a-e2fc1d1ff78a -H "Authorization: Bearer $BEARER_TOKEN" | jq

# Connect as the other user
wget --no-check-certificate \
  --method POST \
  --timeout=0 \
  --header 'Content-Type: application/x-www-form-urlencoded' \
  --header 'Authorization: Basic ZWFnbGVleWU6dGhpc2lzc2VjcmV0' \
  --body-data 'grant_type=password&scope=webclient&username=william.woodward&password=password2' \
   'http://localhost:8901/auth/oauth/token'

BEARER_TOKEN_ADMIN=$(cat token.1 | jq -r .access_token)
curl -v http://localhost:5555/api/licensing/v1/organizations/e254f8c-c442-4ebe-a82a-e2fc1d1ff78a/licenses/f3831f8c-c338-4ebe-a82a-e2fc1d1ff78a -H "Authorization: Bearer $BEARER_TOKEN_ADMIN" | jq


### Chapter 8
# Get Data from Organization
curl http://localhost:8085/v1/organizations/e254f8c-c442-4ebe-a82a-e2fc1d1ff78a -H "Authorization: Bearer $BEARER_TOKEN"

# Data From Licensing, Organization is Missing in Cache
http://localhost:5555/api/licensing/v1/organizations/e254f8c-c442-4ebe-a82a-e2fc1d1ff78a/licenses/f3831f8c-c338-4ebe-a82a-e2fc1d1ff78a

# Try again, this time Org is taken from Cache
# icensingservice_1     | 2024-05-08 14:53:18.716 DEBUG 25 --- [nio-8080-exec-5] c.t.l.c.OrganizationRestTemplateClient   : I have successfully retrieved an organization e254f8c-c442-4ebe-a82a-e2fc1d1ff78a from the redis cache: com.thoughtmechanix.licenses.model.Organization@78619532

# Put New Data in Organization
curl --location --request PUT 'http://localhost:8085/v1/organizations/e254f8c-c442-4ebe-a82a-e2fc1d1ff78a' \
--header "Authorization: Bearer $BEARER_TOKEN" \
--header 'Content-Type: application/json' \
--data-raw '{
    "id": "e254f8c-c442-4ebe-a82a-e2fc1d1ff78a",
    "name": "customer-crm-co",
    "contactName": "Mark Balster TIMO2",
    "contactEmail": "mark.balster@custcrmco.com",
    "contactPhone": "823-555-1212"
}'

# Get Data from Organization
curl http://localhost:8085/v1/organizations/e254f8c-c442-4ebe-a82a-e2fc1d1ff78a -H "Authorization: Bearer $BEARER_TOKEN"

# Data From Licensing, Organization is Missing in Cache
http://localhost:5555/api/licensing/v1/organizations/e254f8c-c442-4ebe-a82a-e2fc1d1ff78a/licenses/f3831f8c-c338-4ebe-a82a-e2fc1d1ff78a

# Try again, this time Org is taken from Cache
# icensingservice_1     | 2024-05-08 14:53:18.716 DEBUG 25 --- [nio-8080-exec-5] c.t.l.c.OrganizationRestTemplateClient   : I have successfully retrieved an organization e254f8c-c442-4ebe-a82a-e2fc1d1ff78a from the redis cache: com.thoughtmechanix.licenses.model.Organization@78619532






